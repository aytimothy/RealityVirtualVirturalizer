{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/dashboard/dashboard.component.ts","webpack:///src/app/dashboard/dashboard.component.html","webpack:///src/app/dialogs/confirm-dialog/confirm-dialog.component.ts","webpack:///src/app/dialogs/confirm-dialog/confirm-dialog.component.html","webpack:///src/app/dialogs/file-dialog/file-dialog.component.ts","webpack:///src/app/dialogs/file-dialog/file-dialog.component.html","webpack:///src/app/dialogs/rosconfig-dialog/rosconfig-dialog.component.ts","webpack:///src/app/dialogs/rosconfig-dialog/rosconfig-dialog.component.html","webpack:///src/app/filesystem/filesystem.component.ts","webpack:///src/app/filesystem/filesystem.component.html","webpack:///src/app/services/data.service.ts","webpack:///src/app/services/dialog.service.ts","webpack:///src/app/services/rosbridge.service.ts","webpack:///src/app/services/scanner.service.ts","webpack:///src/app/services/sidenav.service.ts","webpack:///src/app/sidenav/sidenav.component.ts","webpack:///src/app/sidenav/sidenav.component.html","webpack:///src/app/statusbar/statusbar.component.ts","webpack:///src/app/statusbar/statusbar.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","AppRoutingModule","forRoot","imports","AppComponent","__SidenavService","setSidenav","left","right","selector","templateUrl","styleUrls","AppModule","declarations","providers","entryComponents","bootstrap","DashboardComponent","__BridgeService","elementRef","isConnected","listeningForMessages","isCanvasDisplayed","isImageDisplayed","dashboardWidth","nativeElement","offsetWidth","dashboardHeight","offsetHeight","getConnnectionStatus","subscribe","status","msg_listener","subscribeToTopic","frame","console","log","imageUrl","img","generatePoint","create3DCanvas","unsubstribe","baseVectors","angle_increment","angle_max","angle_min","ranges","length","reps","angle","push","Math","cos","PI","sin","results","i","baseVector","alpha","rotX","beta","rotY","gamma","rotZ","cosa","sina","cosb","sinb","cosc","sinc","axx","axy","axz","ayx","ayy","ayz","azx","azy","azz","x","y","z","add","posX","posY","posZ","addToCanvas","event","target","innerWidth","innerHeight","camera","window","position","renderer","antialias","setClearColor","setSize","elementView","appendChild","domElement","addEventListener","aspect","updateProjectionMatrix","controls","points","scene","light","set","material","size","sizeAttenuation","geometry","forEach","element","vertices","render","requestAnimationFrame","update","read","ConfirmDialogComponent","data","__DialogRef","close","onConfirm","onDismiss","FileDialogComponent","RosconfigDialogComponent","configForm","host","required","port","valid","setCustomAddress","getRawValue","get","onSet","onCancel","FilesystemComponent","__DataService","__DialogService","directoryList","directoryListing","selectedFolderIndex","selectedFolderName","requestRootDirectory","rootDirectoryListing","index","item","isDir","name","navigateDirectory","list","ext","requestReadFile","file","exists","openFileDialog","afterClosed","openConfirmDialog","httpOptions","headers","SERVER_URL","location","href","DataService","http","post","providedIn","DialogService","dialog","msg","title","ico","open","width","disableClose","message","icon","JSON","stringify","BridgeService","hostname","asObservable","next","config","socket","updateConnectionStatus","estabishConnection","response","url","on","messageType","ros","serviceType","ScannerService","isScanning","scanService","createService","statusRequest","callService","updateScannerStatus","stopRequest","requestScannerStatus","startRequest","SidenavService","toggle","SidenavComponent","__ScannerService","getScannerStatus","openRosconfigDialog","toggleScanner","configureRosBridge","StatusbarComponent","bridge_status_icon","scan_status_icon","bridge_status_msg","scan_status_msg","loading","type","toggleLeft","toggleRight","toggleLSideNav","toggleRSideNav","environment","production","bootstrapModule","err","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { DashboardComponent } from './dashboard/dashboard.component';\n\nconst routes: Routes = [\n  { path: '', component: DashboardComponent },\n  { path: 'dashboard', component: DashboardComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component, ViewChild } from '@angular/core';\nimport { SidenavService } from './services/sidenav.service';\nimport { MatSidenav } from '@angular/material/sidenav';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\n\nexport class AppComponent {\n  @ViewChild('left') public left: MatSidenav;\n  @ViewChild('right') public right: MatSidenav;\n\n  constructor(\n    private __SidenavService: SidenavService\n  ) { }\n\n  ngAfterViewInit(): void {\n    this.__SidenavService.setSidenav(this.left, this.right);\n  }\n}\n\n","<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n</head>\n\n<body>\n  <!-- sidenav  -->\n  <mat-sidenav-container autosize>\n\n    <!-- left sidenav  panel -->\n    <mat-sidenav #left id=\"left-sidenav\" mode=\"side\" position=\"start\" opened>\n      <app-sidenav></app-sidenav>\n    </mat-sidenav>\n\n    <!-- right sidenav panel -->\n    <mat-sidenav #right id=\"right-sidenav\" mode=\"side\" position=\"end\" opened>\n      <app-filesystem></app-filesystem>\n    </mat-sidenav>\n    <!-- end of right side panel-->\n\n    <mat-sidenav-content>\n      <main>\n        <router-outlet>\n        </router-outlet>\n      </main>\n      <app-statusbar></app-statusbar>\n    </mat-sidenav-content>\n  </mat-sidenav-container>\n</body>","// import modules\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppRoutingModule } from './app-routing.module';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatListModule } from '@angular/material/list';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatTreeModule } from '@angular/material/tree';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatMenuModule } from '@angular/material/menu';\n// import components\nimport { AppComponent } from './app.component';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { StatusbarComponent } from './statusbar/statusbar.component';\nimport { FilesystemComponent } from './filesystem/filesystem.component';\nimport { ConfirmDialogComponent } from './dialogs/confirm-dialog/confirm-dialog.component';\nimport { FileDialogComponent } from './dialogs/file-dialog/file-dialog.component';\nimport { RosconfigDialogComponent } from './dialogs/rosconfig-dialog/rosconfig-dialog.component';\nimport { SidenavComponent } from './sidenav/sidenav.component';\n// import services\nimport { BridgeService } from './services/rosbridge.service';\nimport { SidenavService } from './services/sidenav.service';\nimport { DialogService } from './services/dialog.service';\nimport { DataService } from './services/data.service';\nimport { ScannerService } from './services/scanner.service';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    DashboardComponent,\n    StatusbarComponent,\n    FilesystemComponent,\n    ConfirmDialogComponent,\n    SidenavComponent,\n    RosconfigDialogComponent,\n    FileDialogComponent,\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatCheckboxModule,\n    MatListModule,\n    MatDialogModule,\n    MatToolbarModule,\n    MatButtonModule,\n    MatIconModule,\n    MatCardModule,\n    MatSidenavModule,\n    MatTreeModule,\n    MatProgressSpinnerModule,\n    MatTooltipModule,\n    MatMenuModule\n  ],\n  providers: [\n    BridgeService,\n    SidenavService,\n    DialogService,\n    DataService,\n    ScannerService\n  ],\n  entryComponents: [ConfirmDialogComponent],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, AfterViewInit, ElementRef, ViewChild, Input } from '@angular/core';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls.js';\nimport { BridgeService } from '../services/rosbridge.service';\nimport * as THREE from 'three/build/three';\n//import * as data from '../../assets/Points.json';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss'],\n})\n\nexport class DashboardComponent implements AfterViewInit {\n\n  @ViewChild('canvas', { read: ElementRef, static: false }) elementView: ElementRef;\n\n  private renderer: THREE.WebGLRenderer;\n  private camera: THREE.PerspectiveCamera;\n  private scene: THREE.Scene;\n  private points: THREE.Points;\n  private controls: OrbitControls;\n\n  public isConnected: boolean = false;\n  public listeningForMessages: boolean = false;\n  public isCanvasDisplayed: boolean = true;\n  public isImageDisplayed: boolean = false;\n\n  private msg_listener: any;\n  public frame: any;\n  public imageUrl: string;\n\n  public dashboardWidth: number;\n  public dashboardHeight: number;\n\n  constructor(\n    public __BridgeService: BridgeService,\n    private elementRef: ElementRef\n  ) { }\n\n  ngAfterViewInit() {\n    // retrieve the width and height of the canvas div dynamically  \n    this.dashboardWidth = this.elementRef.nativeElement.offsetWidth;\n    this.dashboardHeight = this.elementRef.nativeElement.offsetHeight;\n\n    this.__BridgeService.getConnnectionStatus().subscribe(status => {\n      this.isConnected = status\n    });\n    /*data.points.forEach(element => {\n      this.test.push(new THREE.Vector3(element.x, element.y, element.z));\n    });*/\n  }\n\n  public startListening(): void {\n    this.msg_listener = this.__BridgeService.subscribeToTopic('/output', 'world_mapper/Frame')\n    // listen for basic messages\n    this.listeningForMessages = true;\n    this.msg_listener.subscribe((frame: any) => {\n      // output entire frame to console\n      console.log(frame);\n      // update the current frame\n      this.frame = frame;\n      // update the image url per frame\n      this.imageUrl = 'data:image/jpeg;base64,' + frame.img;\n      this.generatePoint(frame);\n    });\n    this.create3DCanvas();\n  }\n\n  public stopListening(): void {\n    this.msg_listener.unsubstribe();\n    this.listeningForMessages = false;\n    this.isCanvasDisplayed = false;\n  }\n\n  private generatePoint(frame): void {\n    var baseVectors = [];\n\n    if (frame.angle_increment >= 0.1) {\n      frame.angle_increment = (frame.angle_max - frame.angle_min) / (frame.ranges.length - 1);\n    }\n    if (frame.angle_increment == 0) {\n      console.log(\"Cannot have an angle increment of 0, because then we'll get nowhere!\\nThere are \" + frame.ranges.length + \" readings.\");\n    }\n\n    var reps = 500;\n    for (var angle = frame.angle_min; angle < frame.angle_max; angle += frame.angle_increment) {\n      baseVectors.push(new THREE.Vector3(Math.cos(angle * (Math.PI / 180)), 0, Math.sin(angle * (Math.PI / 180))));\n      reps--;\n      if (reps < 0) {\n        console.log(\"There's too many vectors to add!\");\n        console.log(\"frame.ranges.Length = \" + frame.ranges.length + \"frame.angle_increment = \" + frame.angle_increment + \"\\nframe.angle_min = \" + frame.angle_min + \"\\nframe.angle_max = \" + frame.angle_max);\n        break;\n      }\n    }\n\n    var results = [];\n    for (let i = 0; i < baseVectors.length; i++) {\n      var baseVector = baseVectors[i];\n\n      var alpha = frame.rotX * (Math.PI / 180);\n      var beta = frame.rotY * (Math.PI / 180);\n      var gamma = frame.rotZ * (Math.PI / 180);\n\n      var cosa = Math.cos(alpha);\n      var sina = Math.sin(alpha);\n      var cosb = Math.cos(beta);\n      var sinb = Math.sin(beta);\n      var cosc = Math.cos(gamma);\n      var sinc = Math.sin(gamma);\n\n      var axx = cosa * cosb;\n      var axy = cosa * sinb * sinc - sina * cosc;\n      var axz = cosa * sinb * cosc + sina * sinc;\n      var ayx = sina * cosb;\n      var ayy = sina * sinb * sinc + cosa * cosc;\n      var ayz = sina * sinb * cosc - cosa * sinc;\n      var azx = -sinb;\n      var azy = cosb * sinc;\n      var azz = cosb * cosc;\n\n      results.push(new THREE.Vector3(baseVector.x * (axx + axy + axz), baseVector.y * (ayx + ayy + ayz), baseVector.z * (azx + azy + azz) * frame.ranges[i]).add(new THREE.Vector3(frame.posX, frame.posY, frame.posZ)));\n    }\n\n    this.addToCanvas(results);\n  }\n\n  public onResize(event: any): void {\n    /* The event will only detect window resize events, \n    Therefore we need to substract 520 pixels from the innerWidth manually \n    to take into account the two side navigation panels which are both 260*/\n    this.dashboardWidth = event.target.innerWidth - 520;\n    this.dashboardHeight = event.target.innerHeight - 164;\n  }\n\n  public toggleImages(): void {\n    if (this.isImageDisplayed) {\n      this.isImageDisplayed = false;\n    }\n    else {\n      this.isImageDisplayed = true;\n      this.isCanvasDisplayed = false;\n    }\n  }\n\n  public toggleCanvas(): void {\n    if (this.isCanvasDisplayed) {\n      this.isCanvasDisplayed = false;\n    }\n    else {\n      this.isImageDisplayed = false;\n      this.isCanvasDisplayed = true;\n    }\n  }\n\n  private create3DCanvas(): void {\n    this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n\n    this.camera.position.z = 15;\n    this.camera.position.y = 5;\n\n    this.renderer = new THREE.WebGLRenderer({ antialias: true });\n\n    this.renderer.setClearColor('#00000');\n    this.renderer.setSize(this.dashboardWidth, this.dashboardHeight);\n\n    this.elementView.nativeElement.appendChild(this.renderer.domElement);\n\n    window.addEventListener('resize', () => {\n      this.renderer.setSize(this.dashboardWidth, this.dashboardHeight);\n      this.camera.aspect = this.dashboardWidth / this.dashboardHeight;\n      this.camera.updateProjectionMatrix();\n    });\n\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n  }\n\n  private addToCanvas(points) {\n    this.scene = new THREE.Scene();\n\n    // LIGHTS\n    var light = new THREE.PointLight(0xFFFFFF, 1, 500);\n    light.position.set(10, 0, 25);\n    this.scene.add(light);\n\n    // MATERIAL\n    var material = new THREE.PointsMaterial({ size: 1, sizeAttenuation: false });\n\n    // GEOMETRY\n    var geometry = new THREE.Geometry();\n\n    // Add vertices\n    points.forEach(element => {\n      geometry.vertices.push(element)\n    });\n\n    this.points = new THREE.Points(geometry, material);\n    // Add points to Scene\n    this.scene.add(this.points);\n\n    let component: DashboardComponent = this;\n    // Render the animation in the canvas\n    (function render() {\n      requestAnimationFrame(render);\n      component.controls.update();\n      component.renderer.render(component.scene, component.camera);\n    }());\n  }\n}","<div *ngIf=\"isConnected\" class=\"row no-gutters\">\n  <!-- toolbar displays dashboard options-->\n  <mat-toolbar id=\"options-bar\">\n    <span>\n      <button mat-flat-button (click)=\"startListening()\" *ngIf=\"!listeningForMessages\">\n        <mat-icon>sync_alt</mat-icon>\n        Listen for messages\n      </button>\n      <button mat-flat-button (click)=\"stopListening()\" *ngIf=\"listeningForMessages\">\n        <mat-icon>sync_alt</mat-icon>\n        Stop Listening\n      </button>\n    </span>\n    <span class=\"spacer\"></span>\n    <span *ngIf=\"listeningForMessages\">\n      <button mat-icon-button matTooltip=\"Display Options\" [matMenuTriggerFor]=\"menu\" #menuTrigger=\"matMenuTrigger\"\n        (click)=\"menuTrigger.openMenu()\">\n        <mat-icon>menu</mat-icon>\n      </button>\n      <mat-menu #menu=\"matMenu\" [overlapTrigger]=\"false\">\n        <span (mouseleave)=\"menuTrigger.closeMenu()\">\n          <button mat-button matTooltip=\"Toggle Images\" (click)=\"toggleImages()\">\n            <mat-icon>collections</mat-icon>\n            Toggle Images\n          </button>\n          <mat-divider></mat-divider>\n          <button mat-button matTooltip=\"Toggle 3D Canvas\" (click)=\"toggleCanvas()\">\n            <mat-icon>3d_rotation</mat-icon>\n            Toggle Canvas\n          </button>\n        </span>\n      </mat-menu>\n    </span>\n  </mat-toolbar>\n  <!-- toolbar with coordinates and sequence number-->\n  <mat-toolbar id=\"coordinates-bar\" color=\"primary\" *ngIf=\"listeningForMessages\">\n    <span class=\"spacer\"><strong>Seq: </strong>\n      <span *ngIf=\"frame\">{{frame.seq}}</span>\n    </span>\n    <span class=\"spacer\"><strong>posX: </strong>\n      <span *ngIf=\"frame\">{{frame.posX}}</span>\n    </span>\n    <span class=\"spacer\"><strong>posY: </strong>\n      <span *ngIf=\"frame\">{{frame.posY}}</span>\n    </span>\n    <span><strong>posZ: </strong>\n      <span *ngIf=\"frame\">{{frame.posZ}}</span>\n    </span>\n  </mat-toolbar>\n  <!-- card that displays either the canvas or images-->\n  <div [hidden]=\"!isImageDisplayed\" class=\"image_wrapper\">\n    <img src=\"{{imageUrl}}\" width=\"{{dashboardWidth}}\" height=\"{{dashboardHeight}}\" alt=\"frame image\">\n  </div>\n  <div #canvas [hidden]=\"!isCanvasDisplayed\" id=\"canvas\" (window:resize)=\"onResize($event)\"></div>\n</div>\n<!-- seperate row that displays an alert message that rosbridge is not connected-->\n<div class=\"container-fluid\" *ngIf=\"!isConnected\">\n  <div class=\"image_wrapper\">\n    <img src=\"assets/error.png\" alt=\"error\">\n    <br>\n    <button mat-button>\n      <mat-icon>error</mat-icon><strong> Please connect to RosBrdge</strong>\n    </button>\n  </div>\n</div>\n","import { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-confirm-dialog',\n  templateUrl: './confirm-dialog.component.html',\n  styleUrls: ['./confirm-dialog.component.scss']\n})\nexport class ConfirmDialogComponent {\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data, public __DialogRef: MatDialogRef<ConfirmDialogComponent>) { }\n\n  onDismiss(): void {\n    this.__DialogRef.close(false);\n  }\n  onConfirm(): void {\n    this.__DialogRef.close(true);\n  }\n}","<h1 mat-dialog-title>\n    <mat-icon>{{data.icon}}</mat-icon>\n    {{data.title}}\n</h1>\n\n<div mat-dialog-content>\n    <p>{{data.message}}</p>\n</div>\n\n<div mat-dialog-actions>\n    <button mat-raised-button color=\"primary\" (click)=\"onConfirm()\">Continue</button>\n    <button mat-raised-button (click)=\"onDismiss()\">Cancel</button>\n</div>","import { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-file-dialog',\n  templateUrl: './file-dialog.component.html',\n  styleUrls: ['./file-dialog.component.scss']\n})\nexport class FileDialogComponent {\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data, public __DialogRef: MatDialogRef<FileDialogComponent>) { }\n\n\n  onDismiss(): void {\n    this.__DialogRef.close(false);\n  }\n}\n","<h1 mat-dialog-title>\n    <mat-icon>file_copy</mat-icon>\n    {{data.name}}\n</h1>\n\n<div mat-dialog-content>\n    <p>{{data.data}}</p>\n</div>\n\n<div mat-dialog-actions>\n    <button mat-raised-button color=\"primary\" (click)=\"onDismiss()\">Close</button>\n</div>","import { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { FormGroup, FormControl, Validators, ValidationErrors } from '@angular/forms';\nimport { BridgeService } from '../../services/rosbridge.service';\n\n@Component({\n  selector: 'app-rosconfig-dialog',\n  templateUrl: './rosconfig-dialog.component.html',\n  styleUrls: ['./rosconfig-dialog.component.scss']\n})\nexport class RosconfigDialogComponent {\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public data,\n    public __DialogRef: MatDialogRef<RosconfigDialogComponent>,\n    private __BridgeService: BridgeService\n  ) { }\n\n  configForm = new FormGroup({\n    host: new FormControl('', [Validators.required]),\n    port: new FormControl('', [Validators.required]),\n  });\n\n  get host(): any { return this.configForm.get('host'); }\n  get port(): any { return this.configForm.get('port'); }\n\n  onCancel(): void {\n    this.__DialogRef.close(false);\n  }\n  \n  onSet(): void {\n    if (this.configForm.valid) {\n      this.__BridgeService.setCustomAddress(this.configForm.getRawValue())\n      this.__DialogRef.close(true);\n    }\n  }\n\n}\n","<button mat-button mat-dialog-title>\n  <mat-icon>settings</mat-icon>\n  Rosbridge Configuration\n</button>\n<div mat-dialog-content>\n  <p>Set a custom host and port for rosbridge websocket connection</p>\n</div>\n<form [formGroup]=\"configForm\">\n  <table>\n    <tr>\n      <td><strong>ws://</strong></td>\n      <td>\n        <mat-form-field mat-line>\n          <input matInput type=\"text\" formControlName=\"host\" placeholder=\"Host\" required>\n        </mat-form-field>\n      </td>\n      <td><strong>:</strong></td>\n      <td>\n        <mat-form-field mat-line [style.width.px]=70>\n          <input matInput type=\"text\" formControlName=\"port\" placeholder=\"Port\" required>\n        </mat-form-field>\n      </td>\n    </tr>\n  </table>\n</form>\n<div mat-dialog-actions>\n  <button mat-raised-button color=\"primary\" (click)=\"onSet()\">Set</button>\n  <button mat-raised-button (click)=\"onCancel()\">Cancel</button>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { DataService } from '../services/data.service';\nimport { DialogService } from '../services/dialog.service';\n\n@Component({\n  selector: 'app-filesystem',\n  templateUrl: './filesystem.component.html',\n  styleUrls: ['./filesystem.component.scss']\n})\nexport class FilesystemComponent implements OnInit {\n\n  selectedFolderIndex: number;\n  selectedFolderName: string;\n  selectedItemIndex: number;\n\n  directoryList: any = [];\n\n  constructor(\n    private __DataService: DataService,\n    private __DialogService: DialogService\n  ) { }\n\n  ngOnInit() {\n    // get root directory listing on page initialisation\n    this.directoryListing();\n  }\n\n  public directoryListing() {\n    // reset any values in template\n    this.selectedFolderIndex = null;\n    this.selectedFolderName = null;\n    // request to get the items in the root directory\n    this.__DataService.requestRootDirectory().subscribe((rootDirectoryListing: any) => {\n      this.directoryList = rootDirectoryListing;\n    });\n  }\n\n  public navigateFileSystem(index: number, item: any): void {\n    // check if the item is a directory\n    if (item.isDir) {\n      // assign folder values for template\n      this.selectedFolderIndex = index;\n      this.selectedFolderName = item.name;\n      // further navigate through the filesystem\n      this.__DataService.navigateDirectory(item).subscribe((list: any) => {\n        this.directoryList = list;\n      });\n    }\n    else if (item.ext == '.bson') {\n      // send a request to get the data for the file\n      this.__DataService.requestReadFile(item).subscribe((file: any) => {\n        //ensure the file still exists\n        if (file.exists) {\n          // output the data in a dialog\n          this.__DialogService.openFileDialog(file)\n            .afterClosed()\n            .subscribe()\n        }\n        else {\n          this.__DialogService.openConfirmDialog(\n            'The file no longer exists', 'Whoops', 'warning')\n            .afterClosed()\n            .subscribe()\n        }\n      });\n    }\n    else {\n      // send a request to get the data for the file\n      this.__DataService.requestReadFile(item).subscribe((file: any) => {\n        //ensure the file still exists\n        if (file.exists) {\n          // output the data in a dialog\n          this.__DialogService.openFileDialog(file)\n            .afterClosed()\n            .subscribe()\n        }\n        else {\n          this.__DialogService.openConfirmDialog(\n            'The file no longer exists', 'Whoops', 'warning')\n            .afterClosed()\n            .subscribe()\n        }\n\n      });\n    }\n  }\n\n}\n","<div class=\"sidenav-header\">\n  <h2 style=\"margin:0;\">\n    <mat-icon>file_copy</mat-icon> Browse Data\n  </h2>\n</div>\n<button mat-button *ngIf=\"selectedFolderName\" (click)=\"directoryListing()\">\n  <mat-icon>keyboard_arrow_left</mat-icon>\n  {{selectedFolderName}}\n</button>\n<button mat-button (click)=\"directoryListing()\">\n  <mat-icon>refresh</mat-icon>\n  Refresh\n</button>\n<mat-nav-list>\n  <mat-list-item *ngFor=\"let item of directoryList; let index = index\" (click)=\"navigateFileSystem(index, item)\"\n    [class.active]=\"selectedItemIndex === index\">\n    <div matLine>\n      <button mat-button>\n        <mat-icon *ngIf=\"item.isDir\" mat-list-icon>folder</mat-icon>\n        <mat-icon *ngIf=\"!item.isDir\" mat-list-icon>file_copy</mat-icon>\n        {{item.name}}\n      </button>\n    </div>\n    <mat-divider></mat-divider>\n    <button mat-icon-button>\n      <mat-icon mat-list-icon>keyboard_arrow_right</mat-icon>\n    </button>\n  </mat-list-item>\n</mat-nav-list>","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\nconst SERVER_URL = window.location.href + 'filesys';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n\n  constructor(private http: HttpClient) { }\n\n  requestRootDirectory() {\n    return this.http.get(SERVER_URL + `/root_list`);\n  }\n\n  navigateDirectory(file: any) {\n    return this.http.post(SERVER_URL + `/navigate_dir`, file, httpOptions);\n  }\n\n  requestReadFile(file: any) {\n    return this.http.post(SERVER_URL + `/readfile`, file, httpOptions);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ConfirmDialogComponent } from '../dialogs/confirm-dialog/confirm-dialog.component';\nimport { RosconfigDialogComponent } from '../dialogs/rosconfig-dialog/rosconfig-dialog.component';\nimport { FileDialogComponent } from '../dialogs/file-dialog/file-dialog.component';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DialogService {\n\n  constructor(public dialog: MatDialog) { }\n\n  openConfirmDialog(msg: string, title: string, ico: string) {\n    return this.dialog.open(ConfirmDialogComponent, {\n      width: '30%',\n      disableClose: true,\n      data: {\n        title: title,\n        message: msg,\n        icon: ico\n      }\n    });\n  }\n\n  openFileDialog(file: any) {\n    return this.dialog.open(FileDialogComponent, {\n      width: '50%',\n      disableClose: true,\n      data: {\n        name: file.name,\n        data: JSON.stringify(file.data)\n      }\n    });\n  }\n\n  openRosconfigDialog() {\n    return this.dialog.open(RosconfigDialogComponent, {\n      width: '40%',\n      disableClose: true,\n    })\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport * as ROSLIB from 'roslib';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class BridgeService {\n\n  // set default host and port values\n  private host: string = window.location.hostname;\n  private port: string = \"9090\";\n\n  // websocket connection\n  public socket: ROSLIB.Ros;\n\n  // connection status\n  public isConnected: BehaviorSubject<boolean>\n\n  constructor() {\n    this.isConnected = new BehaviorSubject<boolean>(false);\n  }\n\n  public getConnnectionStatus(): Observable<boolean> {\n    return this.isConnected.asObservable();\n  }\n\n  private updateConnectionStatus(status: boolean): void {\n    this.isConnected.next(status);\n  }\n\n  public setCustomAddress(config: any) {\n    this.host = config.host;\n    this.port = config.port;\n\n    // if already connected close old connection\n    if (this.isConnected && this.socket) {\n      this.socket.close();\n      this.socket = null;\n      this.updateConnectionStatus(false);\n    }\n\n    // establish a new connection after changes\n    this.estabishConnection((response) => {\n      console.log(response);\n    });\n  }\n\n  public estabishConnection(next): void {\n    // establish a new ws connection\n    this.socket = new ROSLIB.Ros({\n      url: `ws://${this.host}:${this.port}`\n    });\n\n    this.socket.on('connection', (response: any) => { // if the websocket connection is sucessfull\n      this.updateConnectionStatus(true);\n      console.log(`Success! Connected to rosbridge on: ${this.host}:${this.port}`);\n      next(response);\n    });\n\n    this.socket.on('error', (response: any) => { // if the websocket connection failed\n      this.updateConnectionStatus(false);\n      console.log(`Error! Failed to connect to rosbridge on: ${this.host}:${this.port}`);\n      next(response);\n    });\n\n    this.socket.on('close', (response: any) => { // if the websocket connection closes\n      this.updateConnectionStatus(false);\n      console.log(`Closed rosbridge connection on: ${this.host}:${this.port}`);\n      next(response);\n    });\n  }\n\n  public subscribeToTopic(name: string, messageType: string): ROSLIB.Topic { // subscribe to a custom ros topic\n    return new ROSLIB.Topic({\n      ros: this.socket,\n      name: name,\n      messageType: messageType\n    });\n  }\n\n  public createService(name: String, serviceType: String): ROSLIB.Service { // create a custom ros service\n    return new ROSLIB.Service({\n      ros: this.socket,\n      name: name,\n      serviceType: serviceType\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { BridgeService } from '../services/rosbridge.service';\nimport * as ROSLIB from 'roslib';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ScannerService {\n  // scanning status\n  public isScanning: BehaviorSubject<boolean>\n\n  // ros scan service\n  private scanService: ROSLIB.Service;\n\n  constructor(public __BridgeService: BridgeService) {\n    this.isScanning = new BehaviorSubject<boolean>(false);\n  }\n\n  public getScannerStatus(): Observable<boolean> {\n    return this.isScanning.asObservable();\n  }\n\n  private updateScannerStatus(status: boolean): void {\n    this.isScanning.next(status);\n  }\n\n  public requestScannerStatus() {\n    if (!this.scanService) {  // ensure the scanner service has been created\n      this.scanService = this.__BridgeService.createService('/switch', 'string');\n    }\n\n    const statusRequest = new ROSLIB.ServiceRequest('status');\n\n    this.scanService.callService(statusRequest, (status: any) => {\n      if (status == 'on') {\n        this.updateScannerStatus(true);\n      }\n      if (status === 'off') {\n        this.updateScannerStatus(false);\n      }\n    });\n  }\n\n  public toggleScanner(status: boolean): void {\n    if (status) {\n      var stopRequest = new ROSLIB.ServiceRequest('stop');\n      this.scanService.callService(stopRequest)\n      this.requestScannerStatus() // update the scanner status\n    }\n    if (!status) {\n      var startRequest = new ROSLIB.ServiceRequest('start');\n      this.scanService.callService(startRequest);\n      this.requestScannerStatus() // update the scanner status\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { MatSidenav } from '@angular/material/sidenav';\n\n@Injectable({\n  providedIn: 'root'\n})\n/* The code below was copied from stackexchange which adds the ability\n    to toggle the sidenav from a seperate component \n    https://stackoverflow.com/questions/48073057/open-close-sidenav-from-another-component\n*/\nexport class SidenavService {\n  private left: MatSidenav;\n  private right: MatSidenav;\n  constructor() { }\n\n  public setSidenav(left: MatSidenav, right: MatSidenav): void {\n    this.left = left;\n    this.right = right;\n  }\n\n  public toggleRight(): void {\n    this.right.toggle();\n  }\n\n  public toggleLeft(): void {\n    this.left.toggle();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { DialogService } from '../services/dialog.service';\nimport { BridgeService } from '../services/rosbridge.service';\nimport { ScannerService } from '../services/scanner.service';\n\n@Component({\n  selector: 'app-sidenav',\n  templateUrl: './sidenav.component.html',\n  styleUrls: ['./sidenav.component.scss']\n})\nexport class SidenavComponent implements OnInit {\n\n  isScanning: boolean = false;\n  isConnected: boolean = false;\n\n  constructor(\n    private __DialogService: DialogService,\n    public __BridgeService: BridgeService,\n    public __ScannerService: ScannerService\n  ) { }\n\n  public ngOnInit() {\n    // subscribe to connection status\n    this.__BridgeService.getConnnectionStatus().subscribe(status => {\n      this.isConnected = status; // update status in local component when changes\n      if (this.isConnected) {\n        this.__ScannerService.requestScannerStatus();\n      }\n    });\n    // subscribe to scanner status\n    this.__ScannerService.getScannerStatus().subscribe(status => {\n      this.isScanning = status;\n    });\n  }\n\n  public configureRosBridge(): void {\n    this.__DialogService.openRosconfigDialog().afterClosed().subscribe();\n  }\n\n\n  public toggleScanner(): void {\n    this.__ScannerService.toggleScanner(this.isScanning);\n  }\n}","  <div class=\"sidenav-header\">\n    <mat-icon>3d_rotation</mat-icon>\n    <span style=\"margin:0;\" class=\"mat-display-1\">Lidar</span>\n  </div>\n  <mat-nav-list>\n    <section class=\"mat-typography\">\n      <a mat-list-item [routerLink]=\"'dashboard'\">\n        <mat-icon>dashboard</mat-icon>Dashboard\n      </a>\n      <a mat-list-item *ngIf=\"isConnected && isScanning\" (click)=\"toggleScanner()\">\n        <mat-icon>cast</mat-icon>Stop Scanning\n      </a>\n      <a mat-list-item *ngIf=\"isConnected && !isScanning\" (click)=\"toggleScanner()\">\n        <mat-icon>cast</mat-icon>Start Scanning\n      </a>\n      <a mat-list-item *ngIf=\"isConnected\">\n        <mat-icon>settings_overscan</mat-icon>Calibrate Position\n      </a>\n      <a mat-list-item (click)=\"configureRosBridge()\">\n        <mat-icon>settings</mat-icon>Configure Rosbridge\n      </a>\n    </section>\n  </mat-nav-list>\n  <section class=\"img-container\">\n    <h4 class=\"headline-title\">Powered by</h4>\n    <img matListAvatar src=\"assets/ros_logo.png\">\n  </section>\n","import { Component, OnInit } from '@angular/core';\nimport { BridgeService } from '../services/rosbridge.service';\nimport { SidenavService } from '../services/sidenav.service';\nimport { ScannerService } from '../services/scanner.service';\n\n@Component({\n  selector: 'app-statusbar',\n  templateUrl: './statusbar.component.html',\n  styleUrls: ['./statusbar.component.scss']\n})\nexport class StatusbarComponent implements OnInit {\n\n  // status icons\n  bridge_status_icon: string = \"phonelink\";\n  scan_status_icon: string = 'close'\n\n  // status messages\n  bridge_status_msg: string = \"Connecting...\";\n  scan_status_msg: string = \"Disabled\";\n\n  loading: boolean = true;\n  isScanning: boolean = false;\n\n  constructor(\n    private __BridgeService: BridgeService,\n    private __SidenavService: SidenavService,\n    public __ScannerService: ScannerService\n  ) { }\n\n  public ngOnInit(): void {\n    // connect to rosbridge\n    this.__BridgeService.estabishConnection((response: any) => {\n      if (response.type == \"open\") {\n        this.bridge_status_msg = \"Connected\";\n        this.bridge_status_icon = 'phonelink';\n        this.loading = false;\n      }\n      if (response.type == 'close') {\n        this.bridge_status_msg = 'Connection Closed';\n        this.bridge_status_icon = 'close';\n        this.loading = false;\n      }\n      if (response.type == 'error') {\n        this.bridge_status_msg = \"Connection Failed\";\n        this.bridge_status_icon = 'error';\n        this.loading = false;\n      }\n    });\n\n    // subscribe to scanner status\n    this.__ScannerService.getScannerStatus().subscribe(isScanning => {\n      if (isScanning) {\n        this.scan_status_msg = 'Enabled';\n        this.scan_status_icon = 'cast';\n      }\n      if (!isScanning) {\n        this.scan_status_msg = 'Disabled';\n        this.scan_status_icon = 'close';\n      }\n    });\n  }\n\n  // open/close left side navigation pane\n  public toggleLSideNav(): void {\n    this.__SidenavService.toggleLeft();\n  }\n\n  // open/close right side navigation pane\n  public toggleRSideNav(): void {\n    this.__SidenavService.toggleRight();\n  }\n}\n","<mat-toolbar>\n  <mat-toolbar-row>\n    <button mat-icon-button mat-raised-button color=\"primary\" (click)=\"toggleLSideNav()\">\n      <mat-icon>arrow_back</mat-icon>\n    </button>\n    <span class=\"span\">\n      Scanner Status:\n      <button mat-flat-button>\n        <mat-icon>{{scan_status_icon}}</mat-icon>\n        {{scan_status_msg}}\n      </button>\n    </span>\n    <span class=\"span\">\n      Rosbridge Status:\n      <button *ngIf=\"!loading\" mat-flat-button>\n        <mat-icon>{{bridge_status_icon}}\n        </mat-icon>\n        {{bridge_status_msg}}\n      </button>\n      <button *ngIf=\"loading\" mat-flat-button>\n        <mat-icon>\n          <mat-spinner color=\"primary\" diameter=\"20\">\n          </mat-spinner>\n        </mat-icon>\n        {{bridge_status_msg}}\n      </button>\n    </span>\n    <button mat-icon-button mat-raised-button color=\"primary\" (click)=\"toggleRSideNav()\">\n      <mat-icon>arrow_forward</mat-icon>\n    </button>\n  </mat-toolbar-row>\n</mat-toolbar>\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}