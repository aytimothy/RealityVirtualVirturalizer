{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/dashboard/dashboard.component.ts","webpack:///src/app/dashboard/dashboard.component.html","webpack:///src/app/dialogs/confirm-dialog/confirm-dialog.component.ts","webpack:///src/app/dialogs/confirm-dialog/confirm-dialog.component.html","webpack:///src/app/dialogs/file-dialog/file-dialog.component.ts","webpack:///src/app/dialogs/file-dialog/file-dialog.component.html","webpack:///src/app/dialogs/rosconfig-dialog/rosconfig-dialog.component.ts","webpack:///src/app/dialogs/rosconfig-dialog/rosconfig-dialog.component.html","webpack:///src/app/filesystem/filesystem.component.ts","webpack:///src/app/filesystem/filesystem.component.html","webpack:///src/app/services/data.service.ts","webpack:///src/app/services/dialog.service.ts","webpack:///src/app/services/rosbridge.service.ts","webpack:///src/app/services/sidenav.service.ts","webpack:///src/app/sidenav/sidenav.component.ts","webpack:///src/app/sidenav/sidenav.component.html","webpack:///src/app/statusbar/statusbar.component.ts","webpack:///src/app/statusbar/statusbar.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","AppRoutingModule","forRoot","imports","AppComponent","__SidenavService","setSidenav","left","right","selector","templateUrl","styleUrls","AppModule","declarations","providers","entryComponents","bootstrap","DashboardComponent","__BridgeService","listeningForMessages","isCanvasDisplayed","isImageDisplayed","messages","msg_listener","subscribeToTopic","subscribe","frame","console","log","unsubstribe","viewer","divID","width","height","antialias","addObject","undefined","ConfirmDialogComponent","data","__DialogRef","close","onConfirm","onDismiss","FileDialogComponent","RosconfigDialogComponent","configForm","host","required","port","valid","setCustomAddress","getRawValue","get","onSet","onCancel","FilesystemComponent","__DataService","__DialogService","directoryList","directoryListing","selectedFolderIndex","selectedFolderName","requestRootDirectory","rootDirectoryListing","index","item","isDir","name","navigateDirectory","list","ext","requestReadFile","file","exists","openFileDialog","afterClosed","openConfirmDialog","httpOptions","headers","SERVER_URL","window","location","href","DataService","http","post","providedIn","DialogService","dialog","msg","title","ico","open","disableClose","message","icon","JSON","stringify","BridgeService","hostname","isConnected","config","socket","estabishConnection","response","next","url","on","messageType","ros","SidenavService","toggle","SidenavComponent","openRosconfigDialog","configureRosBridge","StatusbarComponent","bridge_status_icon","scan_status_icon","bridge_status_msg","scan_status_msg","loading","type","toggleLeft","toggleRight","toggleLSideNav","toggleRSideNav","environment","production","bootstrapModule","err","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { DashboardComponent } from './dashboard/dashboard.component';\n\nconst routes: Routes = [\n  { path: '', component: DashboardComponent },\n  { path: 'dashboard', component: DashboardComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component, ViewChild } from '@angular/core';\nimport { SidenavService } from './services/sidenav.service';\nimport { MatSidenav } from '@angular/material/sidenav';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\n\nexport class AppComponent {\n  @ViewChild('left') public left: MatSidenav;\n  @ViewChild('right') public right: MatSidenav;\n\n  constructor(\n    private __SidenavService: SidenavService\n  ) { }\n\n  ngAfterViewInit(): void {\n    this.__SidenavService.setSidenav(this.left, this.right);\n  }\n}\n\n","<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n</head>\n\n<body>\n  <!-- sidenav  -->\n  <mat-sidenav-container autosize>\n\n    <!-- left sidenav  panel -->\n    <mat-sidenav #left id=\"left-sidenav\" mode=\"side\" position=\"start\" opened>\n      <app-sidenav></app-sidenav>\n    </mat-sidenav>\n\n    <!-- right sidenav panel -->\n    <mat-sidenav #right id=\"right-sidenav\" mode=\"side\" position=\"end\" opened>\n      <app-filesystem></app-filesystem>\n    </mat-sidenav>\n    <!-- end of right side panel-->\n\n    <mat-sidenav-content>\n      <main>\n        <router-outlet>\n        </router-outlet>\n        <app-statusbar></app-statusbar>\n      </main>\n    \n    </mat-sidenav-content>\n  </mat-sidenav-container>\n</body>","// import modules\nimport { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { AppRoutingModule } from './app-routing.module';\nimport { HttpClientModule } from '@angular/common/http';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatListModule } from '@angular/material/list';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatTreeModule } from '@angular/material/tree';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatMenuModule } from '@angular/material/menu';\n// import components\nimport { AppComponent } from './app.component';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { StatusbarComponent } from './statusbar/statusbar.component';\nimport { FilesystemComponent } from './filesystem/filesystem.component';\nimport { ConfirmDialogComponent } from './dialogs/confirm-dialog/confirm-dialog.component';\nimport { FileDialogComponent } from './dialogs/file-dialog/file-dialog.component';\nimport { RosconfigDialogComponent } from './dialogs/rosconfig-dialog/rosconfig-dialog.component';\nimport { SidenavComponent } from './sidenav/sidenav.component';\n// import services\nimport { BridgeService } from './services/rosbridge.service';\nimport { SidenavService } from './services/sidenav.service';\nimport { DialogService } from './services/dialog.service';\nimport { DataService } from './services/data.service';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    DashboardComponent,\n    StatusbarComponent,\n    FilesystemComponent,\n    ConfirmDialogComponent,\n    SidenavComponent,\n    RosconfigDialogComponent,\n    FileDialogComponent,\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatCheckboxModule,\n    MatListModule,\n    MatDialogModule,\n    MatToolbarModule,\n    MatButtonModule,\n    MatIconModule,\n    MatCardModule,\n    MatSidenavModule,\n    MatTreeModule,\n    MatProgressSpinnerModule,\n    MatTooltipModule,\n    MatMenuModule\n  ],\n  providers: [\n    BridgeService,\n    SidenavService,\n    DialogService,\n    DataService\n  ],\n  entryComponents: [ConfirmDialogComponent],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { BridgeService } from '../services/rosbridge.service';\nimport * as ROS3D from 'ros3d';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss']\n})\n\nexport class DashboardComponent implements OnInit {\n\n  private viewer: ROS3D.Viewer\n\n  public listeningForMessages: boolean = false;\n\n  public isCanvasDisplayed: boolean = false;\n\n  public isImageDisplayed: boolean = false;\n\n  private msg_listener: any;\n\n  public messages = [];\n\n  public frame: any;\n\n  constructor(\n    public __BridgeService: BridgeService\n  ) { }\n\n  ngOnInit() { }\n\n  startListening(): void {\n    this.msg_listener = this.__BridgeService.subscribeToTopic('/output', 'world_mapper/Frame')\n    // listen for basic messages\n    this.listeningForMessages = true;\n    this.msg_listener.subscribe((frame: any) => {\n      // output entire frame to console\n      console.log(frame);\n      // update the current frame\n      this.frame = frame;\n    });\n  }\n\n  stopListening(): void {\n    this.msg_listener.unsubstribe();\n    this.listeningForMessages = false;\n  }\n\n  create3DCanvas() {\n    this.isImageDisplayed = false;\n    this.isCanvasDisplayed = true;\n    // create the main 3d viewer.\n    this.viewer = new ROS3D.Viewer({\n      divID: 'map',\n      width: 800,\n      height: 600,\n      antialias: true\n    });\n    // create background grid in the viewer\n    this.viewer.addObject(new ROS3D.Grid());\n  }\n\n  remove3DCanvas(): void {\n    this.viewer = undefined;\n    this.isCanvasDisplayed = false;\n  }\n}\n","<div *ngIf=\"__BridgeService.isConnected\" class=\"row\">\n  <div class=\"col-lg-12\">\n    <!-- toolbar displays dashboard options-->\n    <mat-toolbar id=\"options-bar\">\n      <span>\n        <button mat-flat-button (click)=\"startListening()\" *ngIf=\"!listeningForMessages\">\n          <mat-icon>sync_alt</mat-icon>\n          Listen for messages\n        </button>\n        <button mat-flat-button (click)=\"stopListening()\" *ngIf=\"listeningForMessages\">\n          <mat-icon>sync_alt</mat-icon>\n          Stop Listening\n        </button>\n      </span>\n      <span class=\"spacer\"></span>\n      <span *ngIf=\"listeningForMessages\">\n        <button mat-icon-button matTooltip=\"Display Options\" [matMenuTriggerFor]=\"menu\" #menuTrigger=\"matMenuTrigger\"\n          (click)=\"menuTrigger.openMenu()\">\n          <mat-icon>menu</mat-icon>\n        </button>\n        <mat-menu #menu=\"matMenu\" [overlapTrigger]=\"false\">\n          <span (mouseleave)=\"menuTrigger.closeMenu()\">\n            <button mat-icon-button matTooltip=\"Toggle Images\" (click)=\"isImageDisplayed = !isImageDisplayed\">\n              <mat-icon>collections</mat-icon>\n            </button>\n            <button mat-icon-button matTooltip=\"Toggle 3D Canvas\" (click)=\"isCanvasDisplayed = !isCanvasDisplayed\">\n              <mat-icon>3d_rotation</mat-icon>\n            </button>\n          </span>\n        </mat-menu>\n      </span>\n    </mat-toolbar>\n    <!-- toolbar with coordinates and sequence number-->\n    <mat-toolbar id=\"coordinates-bar\" color=\"primary\" *ngIf=\"listeningForMessages\">\n      <span class=\"spacer\"><strong>Seq: </strong>{{frame.seq}}</span>\n      <span class=\"spacer\"><strong>posX: </strong>{{frame.posX}}</span>\n      <span class=\"spacer\"><strong>posY: </strong>{{frame.posY}}</span>\n      <span><strong>posZ: </strong>{{frame.posZ}}</span>\n    </mat-toolbar>\n    <!-- card that displays either the canvas or images-->\n    <mat-card>\n      <mat-card-content>\n        <div *ngIf=\"isImageDisplayed\" class=\"image_wrapper\">\n          <img src=\"data:image/png;base64, {{frame.image}}\" alt=\"frame image\">\n        </div>\n        <div *ngIf=\"isCanvasDisplayed\" id=\"map\"></div>\n      </mat-card-content>\n    </mat-card>\n  </div>\n</div>\n<!-- seperate row that displays an alert message that rosbridge is not connected-->\n<div class=\"row\" *ngIf=\"!__BridgeService.isConnected\">\n  <div class=\"col-lg-12 justify-content-center text-center\">\n    <div class=\"alert alert-danger text-center\">\n      <div class=\"image_wrapper\">\n        <img src=\"assets/error.png\" alt=\"error\">\n      </div>\n      <button mat-button>\n        <mat-icon>error</mat-icon><strong> Please connect to RosBrdge</strong>\n      </button>\n    </div>\n  </div>\n</div>","import { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-confirm-dialog',\n  templateUrl: './confirm-dialog.component.html',\n  styleUrls: ['./confirm-dialog.component.scss']\n})\nexport class ConfirmDialogComponent {\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data, public __DialogRef: MatDialogRef<ConfirmDialogComponent>) { }\n\n  onDismiss(): void {\n    this.__DialogRef.close(false);\n  }\n  onConfirm(): void {\n    this.__DialogRef.close(true);\n  }\n}","<h1 mat-dialog-title>\n    <mat-icon>{{data.icon}}</mat-icon>\n    {{data.title}}\n</h1>\n\n<div mat-dialog-content>\n    <p>{{data.message}}</p>\n</div>\n\n<div mat-dialog-actions>\n    <button mat-raised-button color=\"primary\" (click)=\"onConfirm()\">Continue</button>\n    <button mat-raised-button (click)=\"onDismiss()\">Cancel</button>\n</div>","import { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-file-dialog',\n  templateUrl: './file-dialog.component.html',\n  styleUrls: ['./file-dialog.component.scss']\n})\nexport class FileDialogComponent {\n\n  constructor(@Inject(MAT_DIALOG_DATA) public data, public __DialogRef: MatDialogRef<FileDialogComponent>) { }\n\n\n  onDismiss(): void {\n    this.__DialogRef.close(false);\n  }\n}\n","<h1 mat-dialog-title>\n    <mat-icon>file_copy</mat-icon>\n    {{data.name}}\n</h1>\n\n<div mat-dialog-content>\n    <p>{{data.data}}</p>\n</div>\n\n<div mat-dialog-actions>\n    <button mat-raised-button color=\"primary\" (click)=\"onDismiss()\">Close</button>\n</div>","import { Component, Inject } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport { FormGroup, FormControl, Validators, ValidationErrors } from '@angular/forms';\nimport { BridgeService } from '../../services/rosbridge.service';\n\n@Component({\n  selector: 'app-rosconfig-dialog',\n  templateUrl: './rosconfig-dialog.component.html',\n  styleUrls: ['./rosconfig-dialog.component.scss']\n})\nexport class RosconfigDialogComponent {\n\n  constructor(\n    @Inject(MAT_DIALOG_DATA) public data,\n    public __DialogRef: MatDialogRef<RosconfigDialogComponent>,\n    private __BridgeService: BridgeService\n  ) { }\n\n  configForm = new FormGroup({\n    host: new FormControl('', [Validators.required]),\n    port: new FormControl('', [Validators.required]),\n  });\n\n  get host(): any { return this.configForm.get('host'); }\n  get port(): any { return this.configForm.get('port'); }\n\n  onCancel(): void {\n    this.__DialogRef.close(false);\n  }\n  \n  onSet(): void {\n    if (this.configForm.valid) {\n      this.__BridgeService.setCustomAddress(this.configForm.getRawValue())\n      this.__DialogRef.close(true);\n    }\n  }\n\n}\n","<button mat-button mat-dialog-title>\n  <mat-icon>settings</mat-icon>\n  Rosbridge Configuration\n</button>\n<div mat-dialog-content>\n  <p>Set a custom host and port for rosbridge websocket connection</p>\n</div>\n<form [formGroup]=\"configForm\">\n  <table>\n    <tr>\n      <td><strong>ws://</strong></td>\n      <td>\n        <mat-form-field mat-line>\n          <input matInput type=\"text\" formControlName=\"host\" placeholder=\"Host\" required>\n        </mat-form-field>\n      </td>\n      <td><strong>:</strong></td>\n      <td>\n        <mat-form-field mat-line [style.width.px]=70>\n          <input matInput type=\"text\" formControlName=\"port\" placeholder=\"Port\" required>\n        </mat-form-field>\n      </td>\n    </tr>\n  </table>\n</form>\n<div mat-dialog-actions>\n  <button mat-raised-button color=\"primary\" (click)=\"onSet()\">Set</button>\n  <button mat-raised-button (click)=\"onCancel()\">Cancel</button>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { DataService } from '../services/data.service';\nimport { DialogService } from '../services/dialog.service';\n\n@Component({\n  selector: 'app-filesystem',\n  templateUrl: './filesystem.component.html',\n  styleUrls: ['./filesystem.component.scss']\n})\nexport class FilesystemComponent implements OnInit {\n\n  selectedFolderIndex: number;\n  selectedFolderName: string;\n  selectedItemIndex: number;\n\n  directoryList: any = [];\n\n  constructor(\n    private __DataService: DataService,\n    private __DialogService: DialogService\n  ) { }\n\n  ngOnInit() {\n    // get root directory listing on page initialisation\n    this.directoryListing();\n  }\n\n  public directoryListing() {\n    // reset any values in template\n    this.selectedFolderIndex = null;\n    this.selectedFolderName = null;\n    // request to get the items in the root directory\n    this.__DataService.requestRootDirectory().subscribe((rootDirectoryListing: any) => {\n      this.directoryList = rootDirectoryListing;\n    });\n  }\n\n  public navigateFileSystem(index: number, item: any): void {\n    // check if the item is a directory\n    if (item.isDir) {\n      // assign folder values for template\n      this.selectedFolderIndex = index;\n      this.selectedFolderName = item.name;\n      // further navigate through the filesystem\n      this.__DataService.navigateDirectory(item).subscribe((list: any) => {\n        this.directoryList = list;\n      });\n    }\n    else if (item.ext == '.bson') {\n      // send a request to get the data for the file\n      this.__DataService.requestReadFile(item).subscribe((file: any) => {\n        //ensure the file still exists\n        if (file.exists) {\n          // output the data in a dialog\n          this.__DialogService.openFileDialog(file)\n            .afterClosed()\n            .subscribe()\n        }\n        else {\n          this.__DialogService.openConfirmDialog(\n            'The file no longer exists', 'Whoops', 'warning')\n            .afterClosed()\n            .subscribe()\n        }\n      });\n    }\n    else {\n      // send a request to get the data for the file\n      this.__DataService.requestReadFile(item).subscribe((file: any) => {\n        //ensure the file still exists\n        if (file.exists) {\n          // output the data in a dialog\n          this.__DialogService.openFileDialog(file)\n            .afterClosed()\n            .subscribe()\n        }\n        else {\n          this.__DialogService.openConfirmDialog(\n            'The file no longer exists', 'Whoops', 'warning')\n            .afterClosed()\n            .subscribe()\n        }\n\n      });\n    }\n  }\n\n}\n","<div class=\"sidenav-header\">\n  <h2 style=\"margin:0;\">\n    <mat-icon>file_copy</mat-icon> Browse Data\n  </h2>\n</div>\n<button mat-button *ngIf=\"selectedFolderName\" (click)=\"directoryListing()\">\n  <mat-icon>keyboard_arrow_left</mat-icon>\n  {{selectedFolderName}}\n</button>\n<button mat-button (click)=\"directoryListing()\">\n  <mat-icon>refresh</mat-icon>\n  Refresh\n</button>\n<mat-nav-list>\n  <mat-list-item *ngFor=\"let item of directoryList; let index = index\" (click)=\"navigateFileSystem(index, item)\"\n    [class.active]=\"selectedItemIndex === index\">\n    <div matLine>\n      <button mat-button>\n        <mat-icon *ngIf=\"item.isDir\" mat-list-icon>folder</mat-icon>\n        <mat-icon *ngIf=\"!item.isDir\" mat-list-icon>file_copy</mat-icon>\n        {{item.name}}\n      </button>\n    </div>\n    <mat-divider></mat-divider>\n    <button mat-icon-button>\n      <mat-icon mat-list-icon>keyboard_arrow_right</mat-icon>\n    </button>\n  </mat-list-item>\n</mat-nav-list>","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nconst httpOptions = {\n  headers: new HttpHeaders({ 'Content-Type': 'application/json' })\n};\n\nconst SERVER_URL = window.location.href + 'filesys';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n\n  constructor(private http: HttpClient) { }\n\n  requestRootDirectory() {\n    return this.http.get(SERVER_URL + `/root_list`);\n  }\n\n  navigateDirectory(file: any) {\n    return this.http.post(SERVER_URL + `/navigate_dir`, file, httpOptions);\n  }\n\n  requestReadFile(file: any) {\n    return this.http.post(SERVER_URL + `/readfile`, file, httpOptions);\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { MatDialog } from '@angular/material/dialog';\nimport { ConfirmDialogComponent } from '../dialogs/confirm-dialog/confirm-dialog.component';\nimport { RosconfigDialogComponent } from '../dialogs/rosconfig-dialog/rosconfig-dialog.component';\nimport { FileDialogComponent } from '../dialogs/file-dialog/file-dialog.component';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DialogService {\n\n  constructor(public dialog: MatDialog) { }\n\n  openConfirmDialog(msg: string, title: string, ico: string) {\n    return this.dialog.open(ConfirmDialogComponent, {\n      width: '30%',\n      disableClose: true,\n      data: {\n        title: title,\n        message: msg,\n        icon: ico\n      }\n    });\n  }\n\n  openFileDialog(file: any) {\n    return this.dialog.open(FileDialogComponent, {\n      width: '50%',\n      disableClose: true,\n      data: {\n        name: file.name,\n        data: JSON.stringify(file.data)\n      }\n    });\n  }\n\n  openRosconfigDialog() {\n    return this.dialog.open(RosconfigDialogComponent, {\n      width: '40%',\n      disableClose: true,\n    })\n  }\n}\n","import { Injectable } from '@angular/core';\nimport * as ROSLIB from 'roslib';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class BridgeService {\n\n  // set default host and port values\n  private host: string = window.location.hostname;\n  private port: string = \"9090\";\n\n  // websocket connection\n  public socket: ROSLIB.Ros;\n\n  // connection status\n  public isConnected: boolean = false;\n\n  constructor() { }\n\n  public setCustomAddress(config: any) {\n    this.host = config.host;\n    this.port = config.port;\n\n    // if already connected close old connection\n    if (this.isConnected && this.socket) {\n      this.socket.close();\n      this.socket = null;\n      this.isConnected = false;\n    }\n\n    // establish a new connection after changes\n    this.estabishConnection((response) => {\n      console.log(response);\n    });\n  }\n\n  public estabishConnection(next): boolean {\n    if (this.isConnected) { // check if there is already a connection\n      return this.isConnected;\n    }\n\n    // establish a new ws connection\n    this.socket = new ROSLIB.Ros({\n      url: `ws://${this.host}:${this.port}`\n    });\n\n    this.socket.on('connection', (response: any) => { // if the websocket connection is sucessfull\n      this.isConnected = true;\n      console.log(`Success! Connected to rosbridge on: ${this.host}:${this.port}`)\n      next(response)\n    });\n\n    this.socket.on('error', (response: any) => { // if the websocket connection failed\n      this.isConnected = false;\n      console.log(`Error! Failed to connect to rosbridge on: ${this.host}:${this.port}`)\n      next(response)\n    });\n\n    this.socket.on('close', (response: any) => { // if the websocket connection closes\n      this.isConnected = false;\n      console.log(`Closed rosbridge connection on: ${this.host}:${this.port}`)\n      next(response)\n    });\n  }\n\n  public subscribeToTopic(name: string, messageType: string): ROSLIB.Topic { // subscribe to a custom ros topic\n    return new ROSLIB.Topic({\n      ros: this.socket,\n      name: name,\n      messageType: messageType\n    });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { MatSidenav } from '@angular/material/sidenav';\n\n@Injectable({\n  providedIn: 'root'\n})\n/* The code below was copied from stackexchange which adds the ability\n    to toggle the sidenav from a seperate component \n    https://stackoverflow.com/questions/48073057/open-close-sidenav-from-another-component\n*/\nexport class SidenavService {\n  private left: MatSidenav;\n  private right: MatSidenav;\n  constructor() { }\n\n  public setSidenav(left: MatSidenav, right: MatSidenav): void {\n    this.left = left;\n    this.right = right;\n  }\n\n  public toggleRight(): void {\n    this.right.toggle();\n  }\n\n  public toggleLeft(): void {\n    this.left.toggle();\n  }\n}\n","import { Component } from '@angular/core';\nimport { DialogService } from '../services/dialog.service';\n\n@Component({\n  selector: 'app-sidenav',\n  templateUrl: './sidenav.component.html',\n  styleUrls: ['./sidenav.component.scss']\n})\nexport class SidenavComponent {\n\n  constructor(private __DialogService: DialogService) { }\n\n  configureRosBridge() {\n    this.__DialogService.openRosconfigDialog().afterClosed().subscribe()\n  }\n}\n","  <div class=\"sidenav-header\">\n    <mat-icon>3d_rotation</mat-icon>\n    <span style=\"margin:0;\" class=\"mat-display-1\">Lidar</span>\n  </div>\n  <mat-nav-list>\n    <section class=\"mat-typography\">\n      <a mat-list-item [routerLink]=\"'dashboard'\">\n        <mat-icon>dashboard</mat-icon>Dashboard\n      </a>\n      <a mat-list-item>\n        <mat-icon>cast</mat-icon>Start Scanning\n      </a>\n      <a mat-list-item>\n        <mat-icon>settings_overscan</mat-icon>Calibrate Position\n      </a>\n      <a mat-list-item (click)=\"configureRosBridge()\">\n        <mat-icon>settings</mat-icon>Configure Rosbridge\n      </a>\n    </section>\n  </mat-nav-list>\n  <section class=\"img-container\">\n    <h4 class=\"headline-title\">Powered by</h4>\n    <img matListAvatar src=\"assets/ros_logo.png\">\n  </section>\n","import { Component, OnInit } from '@angular/core';\nimport { BridgeService } from '../services/rosbridge.service';\nimport { SidenavService } from '../services/sidenav.service';\n\n@Component({\n  selector: 'app-statusbar',\n  templateUrl: './statusbar.component.html',\n  styleUrls: ['./statusbar.component.scss']\n})\nexport class StatusbarComponent implements OnInit {\n\n  // status icons\n  bridge_status_icon: string = \"phonelink\";\n  scan_status_icon: string = 'close'\n\n  // status messages\n  bridge_status_msg: string = \"Connecting...\";\n  scan_status_msg: string = \"Disabled\";\n\n  loading: boolean = true;\n\n  constructor(\n    private __BridgeService: BridgeService,\n    private __SidenavService: SidenavService) { }\n\n  ngOnInit(): void {\n    // connect to rosbridge\n    this.__BridgeService.estabishConnection((response: any) => {\n      if (response.type == \"open\") {\n        this.bridge_status_msg = \"Connected\";\n        this.bridge_status_icon = 'phonelink';\n        this.loading = false;\n      }\n      if (response.type == 'close') {\n        this.bridge_status_msg = 'Connection Closed';\n        this.bridge_status_icon = 'close';\n        this.loading = false;\n      }\n      if (response.type == 'error') {\n        this.bridge_status_msg = \"Connection Failed\";\n        this.bridge_status_icon = 'error';\n        this.loading = false;\n      }\n    });\n  }\n\n  // open/close left side navigation pane\n  toggleLSideNav(): void {\n    this.__SidenavService.toggleLeft();\n  }\n\n  // open/close right side navigation pane\n  toggleRSideNav(): void {\n    this.__SidenavService.toggleRight();\n  }\n}\n","<mat-toolbar color=\"secondary\">\n  <mat-toolbar-row>\n    <button mat-icon-button mat-raised-button color=\"primary\" (click)=\"toggleLSideNav()\">\n      <mat-icon>arrow_back</mat-icon>\n    </button>\n    <span class=\"span\">\n      Scanner Status:\n      <button mat-flat-button>\n        <mat-icon>{{scan_status_icon}}</mat-icon>\n        {{scan_status_msg}}\n      </button>\n    </span>\n    <span class=\"span\">\n      Rosbridge Status:\n      <button *ngIf=\"!loading\" mat-flat-button>\n        <mat-icon>{{bridge_status_icon}}\n        </mat-icon>\n        {{bridge_status_msg}}\n      </button>\n      <button *ngIf=\"loading\" mat-flat-button>\n        <mat-icon>\n          <mat-spinner color=\"primary\" diameter=\"20\">\n          </mat-spinner>\n        </mat-icon>\n        {{bridge_status_msg}}\n      </button>\n    </span>\n    <button mat-icon-button mat-raised-button color=\"primary\" (click)=\"toggleRSideNav()\">\n      <mat-icon>arrow_forward</mat-icon>\n    </button>\n  </mat-toolbar-row>\n</mat-toolbar>\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}